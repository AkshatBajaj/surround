import os
import sys
import subprocess
from surround import Config
from doit.tools import LongRunning

CONFIG = Config(os.path.dirname(__file__))
DOIT_CONFIG = {{'verbosity':2}}
IMAGE = "%s/%s:%s" % (CONFIG["company"], CONFIG["image"], CONFIG["version"])

def kill_container():
    # Generate a kill list 
    kill_list = subprocess.check_output(["docker", "ps", "-q", "-f", "ancestor=%s" % IMAGE], shell=True)
    
    if kill_list:
        kill_list = kill_list.decode('utf-8').rstrip().split("\n")

        print("Stopping the container..")
        print("Please wait for this process to finish")

        # Stop all the running containers
        proc = subprocess.Popen(["docker", "stop", ' '.join(kill_list)])
        proc.wait()

def task_build():
    """Build the Docker image for the current project"""
    return {{
        'actions': ['docker build --tag=%s .' % IMAGE]
    }}

def task_remove():
    """Remove the Docker image for the current project"""
    return {{
        'actions': ['docker rmi %s -f' % IMAGE]
    }}

def task_dev():
    """Run the main task for the project"""
    return {{
        'actions': [LongRunning("docker run --volume \"%s/\":/app %s" % (CONFIG["volume_path"], IMAGE)), kill_container]
    }}

def task_prod():
    """Run the main task inside a Docker container for use in production """
    return {{
        'actions': [LongRunning("docker run %s" % IMAGE), kill_container],
        'task_dep': ["build"]
    }}

def task_train():
    """Run training mode inside the container"""
    output_path = CONFIG["volume_path"] + "/output"
    data_path = CONFIG["volume_path"] + "/data"

    return {{
        'actions': ["docker run --volume \"%s\":/app/output --volume \"%s\":/app/data %s python3 -m {project_name} --mode train" % (output_path, data_path, IMAGE)]
    }}

def task_batch():
    """Run batch mode inside the container"""
    output_path = CONFIG["volume_path"] + "/output"
    data_path = CONFIG["volume_path"] + "/data"

    return {{
        'actions': ["docker run --volume \"%s\":/app/output --volume \"%s\":/app/data %s python3 -m {project_name} --mode batch" % (output_path, data_path, IMAGE)]
    }}

def task_train_local():
    """Run training mode locally"""
    return {{
        'basename': 'trainLocal',
        'actions': ["%s -m {project_name} --mode train" % sys.executable]
    }}

def task_batch_local():
    """Run batch mode locally"""
    return {{
        'basename': 'batchLocal',
        'actions': ["%s -m {project_name} --mode batch" % sys.executable]
    }}
