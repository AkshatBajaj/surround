import os
import sys
import subprocess
from surround import Config

CONFIG = Config(os.path.dirname(__file__))
DOIT_CONFIG = {{'verbosity':2}}
PACKAGE_PATH = os.path.basename(CONFIG["package_path"])
IMAGE = "%s/%s:%s" % (CONFIG["company"], CONFIG["image"], CONFIG["version"])

def task_build():
    """Build the Docker image for the current project"""
    return {{
        'actions': ['docker build --tag=%s .' % IMAGE]
    }}

def task_remove():
    """Remove the Docker image for the current project"""
    return {{
        'actions': ['docker rmi %s -f' % IMAGE]
    }}

def task_dev():
    """Run the main task for the project"""
    return {{
        'actions': ["docker run -p 8080:8080 --volume \"%s/\":/app %s python3 -m %s" % (CONFIG["volume_path"], IMAGE, PACKAGE_PATH)]
    }}

def task_prod():
    """Run the main task inside a Docker container for use in production """
    return {{
        'actions': ["docker run -p 8080:8080 %s python3 -m %s" % (IMAGE, PACKAGE_PATH)],
        'task_dep': ["build"]
    }}

def task_train():
    """Run training mode inside the container"""
    output_path = CONFIG["volume_path"] + "/output"
    data_path = CONFIG["volume_path"] + "/data"

    return {{
        'actions': ["docker run --volume \"%s\":/app/output --volume \"%s\":/app/data %s python3 -m %s --mode train" % (output_path, data_path, IMAGE, PACKAGE_PATH)]
    }}

def task_batch():
    """Run batch mode inside the container"""
    output_path = CONFIG["volume_path"] + "/output"
    data_path = CONFIG["volume_path"] + "/data"

    return {{
        'actions': ["docker run --volume \"%s\":/app/output --volume \"%s\":/app/data %s python3 -m %s --mode batch" % (output_path, data_path, IMAGE, PACKAGE_PATH)]
    }}

def task_train_local():
    """Run training mode locally"""
    return {{
        'basename': 'trainLocal',
        'actions': ["%s -m %s --mode train" % (sys.executable, PACKAGE_PATH)]
    }}

def task_batch_local():
    """Run batch mode locally"""
    return {{
        'basename': 'batchLocal',
        'actions': ["%s -m %s --mode batch" % (sys.executable, PACKAGE_PATH)]
    }}

def task_web():
    """Run web mode inside the container"""
    return {{
        'actions': ["docker run -p 8080:8080  %s python3 -m %s --mode web" % (IMAGE, PACKAGE_PATH)]
    }}

def task_web_local():
    """Run web mode locally"""
    return {{
        'basename': 'webLocal',
        'actions': ["%s -m %s --mode web" % (sys.executable, PACKAGE_PATH)]
    }}

def task_jupyter():
    command = "rm -r work; pip install -r /home/jovyan/requirements.txt; /usr/local/bin/start.sh jupyter notebook --NotebookApp.token=''"
    
    def run_command():
        process = subprocess.Popen([
            "docker", 
            "run",
            "--rm",
            "--name", "{project_name}_surround_notebook",
            "--volume", "%s:/home/jovyan" % CONFIG['volume_path'], 
            "-p", "8888:8888",
            "--user", "root",
            "-w", "/home/jovyan",
            "jupyter/base-notebook:307ad2bb5fce", 
            "bash",  "-c", command], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        print("Starting jupyter notbook server...\n")
        print("Linux/MacOS URL: http://localhost:8888/tree")
        print("Windows URL:     http://192.168.99.100:8888/tree\n")
        print("Use CTRL+C to stop the server.")

        try:
            process.wait()
        except KeyboardInterrupt:
            pass
        finally:
            print("Closing server... (if this happened instantly, an error occured, check if Docker is running)")
            process = subprocess.Popen(['docker', 'stop', '{project_name}_surround_notebook'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            process.wait()
    
    return {{
        'actions': [run_command]
    }}
